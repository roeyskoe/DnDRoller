@using System.ComponentModel.DataAnnotations;
@page "/"

<PageTitle>Index</PageTitle>

<h2>Stats</h2>

<div class="card bg-light mb-3">
	<div class="card-body">
		<span class="input-group mb-3">
			<span class="input-group-text">Enemy AC:</span>
			<input id="ac" name="AC" type="number" @bind="@AC" class="col-md-1 input-lg" min=1/>
		</span>
	</div>
	
</div>
<div class="card bg-light mb-3">
	<div class="card-body">
		<span class="input-group mb-3">
			<span class="input-group-text">Count:</span>
			<input id="count" name="Count" type="number" @bind="@Count" class="col-md-1 input-lg" min=1/>
		</span>
		<span class="input-group mb-3">
			<span class="input-group-text">Hit:</span>
			<input id="hit" name="HitPlus" type="number" @bind="@HitPlus" class="col-md-1 input-lg" />
		</span>

		<span class="input-group mb-3">
			<span class="input-group-text">Damage:</span>
			<input id="nd" name="Nd" type="number" @bind="@Nd" class="col-md-1 input-lg" />
			<select @bind="@D" class="custom-select" >
				@foreach (var d in Enum.GetValues(typeof(Dice)))
				{
					<option value="@d"> @d </option>
				}
			</select> <span class="input-group-text">+</span> 
			<input id="dmg" name="DamagePlus" type="number" @bind="@DamagePlus" class="col-md-1"  />
		</span>
	</div>
</div>
<div>
	<button class="btn btn-lg btn-outline-dark" @onclick=Throw>Throw</button>
</div>

<div>
	<h2>Results</h2>
	@for(int i = 0; i < Results.Count;  i++)
	{
		string col = @Results[i].Hit >= AC ? "var(--bs-green)" : "var(--bs-red)";
		<Result Title="@i" Damage=@Results[i].Damage Hit=@Results[i].Hit Color=@col></Result>
	}
</div>

@code{
	private int count = 1;
    private int Count
    {
        get => count;
        set => count = Math.Max(1, value);
    }

    private int nd = 1;
    private int Nd
    {
        get => nd;
        set => nd = Math.Max(1, value);
    }

	private int AC = 10;

	private int HitPlus = 0;
	private int DamagePlus = 0;
	private Dice D = Dice.d8;
	private List<Result> Results = new List<Result>();

	private void Throw()
	{
		Results.Clear();
		for (var i = 0; i < Count; i++)
		{
			int hit = Random.Shared.Next(1, (int)Dice.d20 + 1);
			int sum = 0;
			for (var j = 0; j < Nd; j++)
			{
				sum += Random.Shared.Next(1, (int)D + 1);
			}
			Result r = new() {
					Hit = hit + HitPlus,
					Damage = sum + DamagePlus
			};
			Results.Add(r);
		}
		
	}

	enum Dice{
		d4 = 4,
		d6 = 6,
		d8 = 8,
		d10 = 10,
		d12 = 12,
		d20 = 20,
		d100 = 100
	}

	struct Result
	{
		public int Hit;
		public int Damage;
	}
}