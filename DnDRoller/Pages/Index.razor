@using System.ComponentModel.DataAnnotations;
@page "/"

<PageTitle>Index</PageTitle>

<h2>Stats</h2>

<div class="card bg-light mb-3">
	<div class="card-body">
		<span class="input-group mb-3">
			<span class="input-group-text">Number of groups:</span>
			<input id="groups" name="Groups" type="number" @bind="@Groups" class="col-md-1 input-lg" min=1/>
		</span>
	</div>
</div>

<div class="card bg-light mb-3">
	<div class="card-body">
		<span class="input-group mb-3">
			<span class="input-group-text">Enemy AC:</span>
			<input id="ac" name="AC" type="number" @bind="@AC" class="col-md-1 input-lg" min=1/>
		</span>
	</div>
</div>
<div class="card bg-light mb-3">
	<div class="card-body">
		<span class="input-group mb-3">
			<span class="input-group-text">Count:</span>
			<input id="count" name="Count" type="number" @bind="@Count" class="col-md-1 input-lg" min=1/>
		</span>
		<span class="input-group mb-3">
			<span class="input-group-text">Hit:</span>
			<input id="hit" name="HitPlus" type="number" @bind="@HitPlus" class="col-md-1 input-lg" />
		</span>

		<span class="input-group mb-3">
			<span class="input-group-text">Damage:</span>
			<input id="nd" name="Nd" type="number" @bind="@Nd" class="col-md-1 input-lg" />
			<select @bind="@D" class="custom-select" >
				@foreach (var d in Enum.GetValues(typeof(Dice)))
				{
					<option value="@d"> @d </option>
				}
			</select> <span class="input-group-text">+</span> 
			<input id="dmg" name="DamagePlus" type="number" @bind="@DamagePlus" class="col-md-1"  />
		</span>
	</div>
</div>
<div>
	<button class="btn btn-lg btn-outline-dark" @onclick=Throw>Throw</button>
</div>

<div>
	<h2>Results</h2>
	<div class="d-flex flex-wrap">
		@for(int i = 0; i < Results.Count;  i++)
		{
			<Result Title="@i" ThrowResult=@Results[i]></Result>
		}
	</div>
</div>

@code{

    private int groups = 1;
	private int Groups
	{
		get => groups;
		set => groups = Math.Max(1, value);
	}

	private int count = 1;
	private int Count
	{
		get => count;
		set => count = Math.Max(1, value);
	}

	private int nd = 1;
	private int Nd
	{
		get => nd;
		set => nd = Math.Max(1, value);
	}

	private int AC = 10;

	private int HitPlus = 0;
	private int DamagePlus = 0;
	private Dice D = Dice.d8;
	private List<ThrowResult> Results = new List<ThrowResult>();

	private void Throw()
	{
		Results.Clear();
		for (var i = 0; i < Count; i++)
		{
			int hit = Random.Shared.Next(1, (int)Dice.d20 + 1);
			bool crit = hit == 20 ? true : false;
			int sum = 0;
			// On a nat20, roll 2x dices.
			int diceToRoll = crit ? 2 * Nd : Nd;
			for (var j = 0; j < diceToRoll; j++)
			{
				sum += Random.Shared.Next(1, (int)D + 1);
			}
			
			int hitTotal = hit + HitPlus;
			ThrowResult r = new() {
					Crit = crit,
					Hit = hitTotal,
					Succeeded = crit || (hitTotal > AC),
					Damage = sum + DamagePlus
			};
			Results.Add(r);
		}
	}
}