<span class="input-group mb-3">
    <span class="input-group-text">Damage:</span>
    <input id="nd" name="Nd" type="number" @bind="@Attack.NDice" class="col-md-2 input-lg"/>
    <select @bind="@Attack.Dice" class="custom-select">
        @foreach (var d in Enum.GetValues(typeof(Dice)))
        {
            <option value="@d"> @d </option>
        }
    </select>
    <span class="input-group-text">+</span>
    <input id="dmg" name="DamagePlus" type="number" @bind="@Attack.Plus" class="col-md-2"/>
    @if (Attack is AOEAttack aoe)
    {
        <span class="input-group-text">Save</span>
        <select @bind="@aoe.Save" class="custom-select">
            @foreach (var d in Enum.GetValues(typeof(Save)))
            {
                <option value="@d"> @d </option>
            }
        </select>
        <input id="saveLimit" name="SaveLimit" type="number" @bind="@aoe.SaveLimit" class="col-md-2"/>
    }
    else if(Attack is DirectAttack dir)
    {
        <span class="input-group-text">Hit +</span>
        <input id="toHitPlus" name="ToHitPlus" type="number" @bind="@dir.ToHitPlus" class="col-md-2"/>
    }
    
    <input type="text" class="form-control" value="@Attack.Name" @oninput="args => { Attack.Name = (string) args.Value; Helper.Update(); }" placeholder="Name"/>
    
    <Button type="button" class="btn btn-secondary" @onclick="()=>AttackFunc(Attack)">Throw All</Button>
    
    <span class="ms-auto">
        <button type="button" class="btn-close btn-sm" aria-label="Close" @onclick=DoRemove></button>
    </span>
</span>

@code {

    [Parameter]
    public Attack Attack { get; set; }

    [Parameter]
    public Action<Attack> AttackFunc { get; set; }

    [Parameter]
    public Action<AttackComponent> RemoveFunc { get; set; }
    
    private void DoRemove()
    {
        RemoveFunc(this);
    }

}